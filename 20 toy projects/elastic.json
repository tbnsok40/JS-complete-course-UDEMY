//it works
{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": { // match 가 point임
                                "work_field.choice_field.key": "B006"
                            }
                        }
                    ]
                }
            }
        }
    }
}
// it works too
{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "match": {
                    "work_field.choice_field.key": "B006"
                }
            }
        }
    }
}


{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "bool": {
                    "must": {
                        "match": {
                            "work_field.expert_field.value": "협박"
                        }
                    }
                }
            }
        }
    }
}
///
// not working
{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "work_filed.choice_field.key": "B006"
                            }
                        }
                    ]
                }
            }
        }
    }
}




{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "nested": {
                    "path": "work_field.choice_field",
                    "query": {
                        "bool": {
                            "must": [
                                {
                                    "match": { // match 가 point임
                                        "work_field.choice_field.key": "B006"
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        }
    }
}

{
    "query": {
        "nested": {
            "path": "license",
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "license.test_type": "사법시험"
                            }
                        }
                    ]
                }
            }
        }
    }
}



{
    "query": {
        "nested": {
            "path": "work_field",
            "query": {
                "nested": {
                    "bool": {
                        "must": [
                            {
                                "match": {
                                    "work_field.choice_field.key": "B010"
                                }
                            }
                        ]
                    }
                }
            }
        }
    }
}







"_source": {
    "best_practice": [
        {
            "code": "A002",
            "best_practice_summary": "a",
            "best_practice_type": "AAA"
        },
        {
            "code": "A001",
            "best_practice_summary": "s",
            "best_practice_type": "BBB"
        }
    ],
    "work_field": {
        "choice_field": [
            {
                "isSelected": true,
                "idx": 1,
                "value": "CCC",
                "key": "B002"
            },
            {
                "isSelected": true,
                "idx": 77,
                "value": "DDD",
                "key": "B078"
            }
        ]
    }
}




{
    "query": {
        "nested": {
            "query": {
                "bool": {
                    "must": [
                        {
                            "match": {
                                "work_field.choice_field.value": {
                                    "query": "상속",
                                    "operator": "OR",
                                    "prefix_length": 0,
                                    "max_expansions": 50,
                                    "fuzzy_transpositions": true,
                                    "lenient": false,
                                    "zero_terms_query": "NONE",
                                    "auto_generate_synonyms_phrase_query": true,
                                    "boost": 1.0
                                }
                            }
                        }
                    ],
                    "adjust_pure_negative": true,
                    "boost": 1.0
                }
            },
            "path": "work_field",
            "ignore_unmapped": false,
            "score_mode": "avg",
            "boost": 1.0
        }
    }
}




{
    "nested": {
        "query": {
            "bool": {
                "must": [
                    {
                        "match": {
                            "value": {
                                "query": "���",
                                "operator": "OR",
                                "prefix_length": 0,
                                "max_expansions": 50,
                                "fuzzy_transpositions": true,
                                "lenient": false,
                                "zero_terms_query": "NONE",
                                "auto_generate_synonyms_phrase_query": true,
                                "boost": 1.0
                            }
                        }
                    }
                ],
                "adjust_pure_negative": true,
                "boost": 1.0
            }
        },
        "path": "work_field",
        "ignore_unmapped": false,
        "score_mode": "avg",
        "boost": 1.0
    }
}





{bucket_type=C, 
    insert_timestamp=2021-02-08 22: 16: 31.441994, 
    certification_file_name=null,
    insert_portal_id=pyhoo, 
    is_authentication=F, 
    org_file_name=algorithm.png, 
    certification_file_no=null, 
    thumbnail_url=/company_dev_4/2021/02/08/69908ec0-69c4-11eb-9c8b-d95b2395b0b0.png, certification_job=now working, path=69908ec0-69c4-11eb-9c8b-d95b2395b0b0, 
    authentication_info=null, 
    is_deleted=F,
    active_status=T, 
    size=5486, 
    update_timestamp=null, 
    update_portal_id=null, 
    expert_authentication_no=74, expert_user_no=166
}
///////////

import React,
{Component
} from 'react';
import LUXDialog from 'luna-rocket/LUXDialog'; // popup
const globals = require("../../../../config/" + process.env.BUILD_ENV + "/Portal/globals");
const BUCKET_TYPE = 'C'; // S: 서비스, C: 회사, U: 사용자
import {uploadFile, downloadFile, deleteFile
} from '../../../../utils/s3ObjectUtils';
import Ajax from "../../../../utils/ajax.js";
import Validation from '../../../../utils/validation.js';
import LUXFileDropZone from 'luna-rocket/LUXFileDropZone';
import Button from "./Button";
import {SERVICE_CODE, SERVICE_KEY
} from "../Utils/Enums";
import SinglePackWebOfficePlanDialog from "../../Communication2/Plan/SinglePackWebOfficePlanDialog";
import SinglePage from "../../../Layout";

const ACCEPT_EXTENSION_TYPE = ['BMP', 'JPEG', 'GIF', 'PNG', 'TIFF', 'PDF', 'JPG', 'TIF',
    'image/bmp', 'image/jpeg', 'image/gif', 'image/png', 'image/tiff', 'image/tif', 'image/pdf', 'image/jpg'
]

class AuthenticationUploadMain extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            progressValue: 0,
            selectedFiles: [],
            isWorking: false,
            // attachFiles: this.props.fileList ? this.props.fileList : [],
            deleteFiles: this.props.deleteList ? this.props.deleteList : [],
            // isOpenImportWeDriveDialog: false,
            expert_job: '',
            expert_user_name: '',
            uploadFileList: []
        }
    }


    componentDidMount() {
        this.callUserInfo()
    }
    // 현재 사용자 정보 조회
    callUserInfo = () => {
        let url = globals.wehagoCommonApiUrl + '/service/user/userinfo/list';

        let param = {
            service_code: SERVICE_CODE.EXPERT_ENROLLMENT_CODE,
            security_key: SERVICE_KEY.EXPERT_ENROLLMENT_KEY,
            company_no: document.getElementById("h_selected_company_no").value,
            employee_no: document.getElementById("h_selected_employee_no").value,
        }

        Ajax.post(url, param).then((response) => {
            response = JSON.parse(response)
            if (response.resultCode === 200) {
                const result = response.resultData[
                    0
                ]
                this.setState({
                        expert_user_name: result.user_name,
                        expert_job: result.position_name,
                }
                )
            }
        });
    }

    handleChange = (selectedFiles, type) => {
        // file 1차 첨부
        if (!Validation.checkEmpty(selectedFiles)) {
            if (this.checkImageFile(selectedFiles)) { // 이미지 파일일 경우
                // callback 처리 하지 않으면, 비동기 처리로 인해 상태변화 일어나지 않는다.
                // this.setState({selectedFiles: selectedFiles})
                // console.log("it s image : ", this.state.selectedFiles);
                this.setState({selectedFiles: selectedFiles
                })
            }
        }

        if (type === "delete") { // 휴지통 버튼 작동
            this.setState({selectedFiles: selectedFiles
            })
        }
    }
    // 진행사항 숫자 표시
    handleUpProgressValue = () => {
        this.setState({progressValue: (this.state.progressValue + 10) % 110
        })
    }
    //파일 확장자 체크 - 경비청구 허용 확장자(BMP, JPEG, GIF, PNG, TIFF,TIF, PDF)
    checkImageFile = (fileList) => {
        for (let file of fileList) {
            //로컬업로드는 type(mimeType), 웹스토리지는 extentionType에 확장자명 존재
            if (file.fileType === 'serverFile') {
                continue;
            }
            try {
                if (file.type) {
                    let check = false
                    for (let type of ACCEPT_EXTENSION_TYPE) {
                        if (file.type.toUpperCase().indexOf(type) !== -1) {
                            check = true
                            break
                        }
                    }
                    if (!check) {
                        return false
                    }
                } else if (file.extentionType) {
                    if (ACCEPT_EXTENSION_TYPE.indexOf(file.extentionType.toUpperCase()) === -1) {
                        return false
                    }
                } else {
                    return false
                }
            } catch (err) {
                return false
            }
        }
        return true
    }

    handleTouchTabCloud = () => {
        console.log('handleTouchTabCloud');
    }

    handleSuccess = (resolve, file) => {
        resolve(
            {
                path: file.newFileName,
                bucket_type: file.bucketType,
                org_file_name: file.orgFileName,
                thumbnail_url: file.thumbnail,
                size: file.fileSize,
                expert_job: this.state.expert_job,
                expert_user_name: this.state.expert_user_name,
        }
        )
    }

    handleUploadFile = () => {
        let {selectedFiles
        } = this.state; // this.state.selectedFiles
        if (selectedFiles.length > 10) {
            LUXDialog.alert('첨부파일은 최대 10개까지 업로드할 수 있습니다.',
            {type: 'error'
            });
            return;
        }

        if (selectedFiles.length > 0) {
            if (selectedFiles.some(detail => detail.name.length > 100)) {
                LUXDialog.alert('첨부파일명은 최대 100자까지 가능합니다.',
                {type: 'error'
                });
                return
            }
        }
        if (selectedFiles.length > 0) {

            let url = globals.expertsearchingApiUrl + "/service/servicekey";
            Ajax.get(url, false).then((response) => {
                response = JSON.parse(response);
                if (response.resultCode === 200) {
                    // 잘들어옴
                    let fileUpload = []
                    let resultData = response.resultData;
                    let securityKey = resultData.securityKey; // 암호화된 키(책임님이 주신건 암호화 안된 것)
                    let serviceCode = resultData.serviceCode;
                    console.log("selectedFiles ", selectedFiles)
                    for (let i in selectedFiles) {
                        let fileType = selectedFiles[i
                        ].fileType

                        // if (!('fileType' in selectedFiles[i] && fileType === 'localFile')) continue;
                        // 웹스토리지 부분은 추후 처리 참고(in EApprovalFileArea.js 의 handleUploadFile)
                        if (fileType === 'localFile') {
                            fileUpload.push(
                                new Promise((resolve, reject) => {
                                    try {
                                        let fileUploadData = { // 여기 아래의 항목은 s3에 저장할 내용들이다.
                                            file: selectedFiles[i
                                        ], // 업로드할 파일 객체
                                            serviceKey: securityKey, // 암호화된 서비스 키
                                            serviceCode: serviceCode, // 서비스 코드
                                            bucketType: BUCKET_TYPE, // S: 서비스, C: 회사, U: 사용자
                                            handleSuccess: this.handleSuccess.bind(this, resolve), // 업로드 성공 시, 콜백 메소드
                                            async: false,
                                    };
                                        uploadFile(fileUploadData) //s3ObjectUtils.js의 메소드
                                } catch (err) {
                                        reject(err)
                                }
                            })
                            );
                            // 466 line ?
                            if (selectedFiles.length > 0) {
                                for (let file of selectedFiles) {
                                    if (!Validation.checkEmpty(file.doc_no)) {
                                        file.size = file.size.toString();
                                        fileUpload.push(file);
                                    }
                                }
                            }
                            // this.handleApi(fileUpload);
                        }
                    }
                    this.handleApi(fileUpload);
                }
            }, (error) => {});
        } else {}
    }


    handleApi = (fileUpload) => {
        // console.log('hi', fileUpload)
        for (let i in fileUpload) {
            this.state.uploadFileList.push(fileUpload[i
            ]._result)
        }
        // by kim
        // let param = [
        //     {
        //         expert_job: this.state.expert_job,
        //         expert_user_name: this.state.expert_user_name,
        //         uploadFileList: this.state.uploadFileList
        //     }
        // ] // 이건 리스트를 넘겼고, 내껀 object를 넘겼다(일종의 hash상태)


        let url = globals.expertsearchingApiUrl + '/certification';
        // 여기를 키로 만들어 api로 넘기는 것이 핵심
        // json.stringify하지 않아서 문제 발생된 것. key는 uploadFileList


        let param_origin = {uploadList: JSON.stringify(this.state.uploadFileList)
        }
        return Ajax.post(url, param_origin).then((response) => {
            console.log("2000000")
            console.log(JSON.parse(response))
            return JSON.parse(response);
        }).catch(error => ({error
        }))


        // return Ajax.post(url, JSON.stringify(param)).then((response) => {
        //     return JSON.parse(response);
        // }).catch(error => ({error}))
    }
    // render() {
    //     return (
    //         <SinglePage>
    //             <div style={{display: 'block'}}>
    //                 <LUXFileDropZone
    //                     onChange={this.handleChange}
    //                     onTouchTapCloud={this.handleImportWeDriveDialog}
    //                     selectedFiles={this.state.selectedFiles}
    //                     // accept="image/png"
    //                     isMultipleFileAllowed={true}
    //                     showDeleteLoadButton={true}
    //                     isWorking={this.state.isWorking}
    //                     progressValue={this.state.progressValue}
    //                 />
    //                 <div>
    //                     <Button
    //                         // selectedFiles={this.state.selectedFiles} // Button compononent에서 정의돼있는 것 인지
    //                         handleUploadFile={this.handleUploadFile} //handleUploadFile 메소드
    //                     />
    //                 </div>
    //             </div>
    //         </SinglePage>
    //     );
    // }


    render() {
        return (
            <div className="LUX_basic_dialog">
                <div className="dimmed"/>
                <div className="dialog_wrap_tbl">
                    <div className="dialog_wrap_tblcel">
                        <div className="dialog_wrap">
                            { /* [D] 여기부터 Luna 다이얼로그에 넣어서 사용 */}
                            <div className="dialog_content wel_dialog" style={
            {width: '720px'
            }
        }>
                                <div className="dialog_data">
                                    <div className="dialog_data_area type_none_title">
                                        <button type="button" className="LUX_basic_btn btn_clr"><span
                                            className="sp_lux">닫기</span></button>
                                        <div className="dialog_section_tit" style={
            {margin: '0 0 30px'
            }
        }>
                                            <strong>전문가 자격 인증하기</strong>
                                            <p>전문가 자격 확인서를 등록하고 전문가 회원 관리 서비스를 사용해보세요.</p>
                                        </div>
                                        <div className="dialog_section type_radio_area">
                                            <strong>인증 할 전문가</strong>
                                            <ul>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio1"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio1">변호사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">법무사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">공인회계사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">세무사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">공인중개사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">노무사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">행정사</label>
                            </span>
                          </span>
                                                </li>
                                                <li>
                          <span className="LUX_basic_switch">
                            <span className="LUXrabx">
                              { /* 동일한 구조 input type checkbox LUXckbx LUXstarbx / radio LUXrabx LUXonoffbx 로 이이지 변경 */}
                                <input type="radio" id="input_forid_radio2"/>
                                { /* 이미지 */}
                                <span className="sp_lux"/>
                                { /* input id 값과 label for 값을 동일하게 연결 */}
                                <label htmlFor="input_forid_radio2">손해사정사</label>
                            </span>
                          </span>
                                                </li>
                                            </ul>
                                        </div>
                                        <div className="dialog_section type_half_box">
                                            <div className="left_box">
                                                <div className="preview_img">
                                                    <img src="//via.placeholder.com/318x362" alt=""/>
                                                </div>
                                            </div>
                                            <div className="right_box">
                                                <div className="notice_box">
                                                    <strong>안내</strong>
                                                    <p>
                                                        변호사법의 알선에 대한 규제로 인해 전문가 자격증이 등록되지않은
                                                        사용자에게는 전문가회원찾기 서비스를 제공할 수 없습니다.<br/>
                                                        자격증을 등록해주세요.
                                                    </p>
                                                    <p className="point_color">
                                                        * 필요서류<br/>
                                                        변호사 : 대한변호사협회에서 발급된 변호사등록 증명원<br/>
                                                        법무사 : 법무사자격증 또는 범무사자격 등록증22222
                                                    </p>
                                                </div>
                                                <div className="in_box">
                                                    <LUXFileDropZone
                                                        onChange={this.handleChange
        }
                                                        onTouchTapCloud={this.handleImportWeDriveDialog
        }
                                                        selectedFiles={this.state.selectedFiles
        }
        // accept="image/png"
                                                        isMultipleFileAllowed={
            true
        }
                                                        showDeleteLoadButton={
            true
        }
                                                        isWorking={this.state.isWorking
        }
                                                        progressValue={this.state.progressValue
        }
                                                    />
                                                </div>
                                            </div>
                                        </div>
                                        { /* [D] 버튼 선택시 class="pay_choice" 에 active 추가 부탁 드립니다. */}
                                        <div className="dialog_btnbx">
                                            <div>
                                                <Button
                                                    // selectedFiles={this.state.selectedFiles} // Button compononent에서 정의돼있는 것 인지
                                                    handleUploadFile={this.handleUploadFile
        } //handleUploadFile 메소드
                                                />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            { /* [// D] 여기까지 Luna 다이얼로그에 넣어서 사용 */}
                        </div>
                    </div>
                </div>
            </div>
        );
    }
}
//
// Test.propTypes = {
//     // openSnackBar : React.PropTypes.func.isRequired,
//     // readOnly : React.PropTypes.bool,
//     // handleApi: React.PropTypes.func.isRequired,
//     // cardType : React.PropTypes.string.isRequired,
//     // cardType : React.PropTypes.string.isRequired,
//     fileList: React.PropTypes.array,
//     // toggleProgressBar : React.PropTypes.func.isRequired,
//     // handleImportWeDriveDialog : React.PropTypes.func.isRequired,
// };

export default AuthenticationUploadMain;

///////////////




export const EXPERT_SEARCH_HOME = [
    [
        "type_01",
        "변호사"
    ],
    [
        "type_02",
        "법무사"
    ],
    [
        "type_03",
        "공인회계사"
    ],
    [
        "type_04",
        "세무사"
    ],
    [
        "type_05",
        "공인중계사"
    ],
    [
        "type_06",
        "노무사"
    ],
    [
        "type_07",
        "행정사"
    ],
    [
        "type_08",
        "손해사정사"
    ]
]
/////
{ /* 전문가회원찾기 서비스 메인*/}
  <Route path="expertsearchhome(/:menu)(/:sub1)(/:sub2)" getComponent={(location, cb) => {
    load(System.import('./components/Services/ExpertSearching/Main'), cb)
    }
} />

  { /* 전문가회원관리 자격증 첨부*/}
  <Route path="expertauthentication(/:menu)(/:sub1)(/:sub2)" getComponent={(location, cb) => {
    load(System.import('./components/Services/ExpertSearching/AuthenticationUpload/AuthenticationUploadMain'), cb)
    }
} />


<div className="LUX_basic_dialog">
                <div className="dimmed"/>
                <div className="dialog_wrap_tbl">
                    <div className="dialog_wrap_tblcel">
                        <div className="dialog_wrap type_none_border type_radius">
                            { /* [D] 여기부터 다이얼로그 컴퍼넌트에 적용 */}
                            { /*{job === 'legalOfficer' &&*/}
                            { /*<div className="dialog_content wel type_certi dz_font">*/}
                            { /*    <div className="dialog_data" style={{width: '780px'}}>*/}
                            { /*        <div className="dialog_data_tit">*/}
                            { /*            <h1 className="title_point">법무사 자격인증</h1>*/}
                            { /*            <p className="title_desc">*/}
                            { /*                전문가 회원 관리 서비스를 이용하기 위해서는 범무사 자격인증이 필요합니다.*/}
                            { /*            </p>*/}
                            { /*        </div>*/}
                            { /*        <div className="dialog_data_area">*/}
                            { /*            <div className="dialog_data_section">*/}
                            { /*                <div className="dv_bx">*/}
                            { /*                    <div className="dv_left">*/}
                            { /*                        <div className="view_box">*/}
                            { /*                            <div className="view_img">*/}
                            { /*                                <img*/}
                            { /*                                    src="https://static.wehago.com/imgs/wel/img_sample_certificate01.png"*/}
                            { /*                                    alt=""/>*/}
                            { /*                                <p className="box_title">예시 이미지</p>*/}
                            { /*                            </div>*/}
                            { /*                        </div>*/}
                            { /*                    </div>*/}
                            { /*                    <div className="dv_right">*/}
                            { /*                        {job === "lawyer" &&*/}
                            { /*                        <div className="right_box">*/}
                            { /*                            <div className="notice_box">*/}
                            { /*                                <strong>안내</strong>*/}
                            { /*                                <p>*/}
                            { /*                                    변호사법의 알선에 대한 규제로 인해 전문가 자격증이 등록되지않은*/}
                            { /*                                    사용자에게는 전문가회원찾기 서비스를 제공할 수 없습니다.<br/>*/}
                            { /*                                    자격증을 등록해주세요.*/}
                            { /*                                </p>*/}
                            { /*                                <p className="point_color">*/}
                            { /*                                    * 필요서류<br/>*/}
                            { /*                                    변호사 : 대한변호사협회에서 발급된 변호사등록 증명원<br/>*/}
                            { /*                                    법무사 : 법무사자격증 또는 범무사자격 등록증22222*/}
                            { /*                                </p>*/}
                            { /*                            </div>*/}
                            { /*                            <div className="in_box">*/}

                            { /*                                <label htmlFor="authenticationNo">변호사 자격 발급번호</label>*/}
                            { /*                                <input type="text" id="authenticationNo"*/}
                            { /*                                       placeholder="발급번호를 입력해 주세요."/>*/}
                            { /*                            </div>*/}
                            { /*                        </div>}*/}
                            { /*                        {job === 'legalOfficer' &&*/}
                            { /*                        <div className="right_box">*/}
                            { /*                            <div className="notice_box">*/}
                            { /*                                <strong>안내</strong>*/}
                            { /*                                <p>*/}
                            { /*                                    변호사법의 알선에 대한 규제로 인해 전문가 자격증이 등록되지않은*/}
                            { /*                                    사용자에게는 전문가회원찾기 서비스를 제공할 수 없습니다.<br/>*/}
                            { /*                                    자격증을 등록해주세요.*/}
                            { /*                                </p>*/}
                            { /*                                <p className="point_color">*/}
                            { /*                                    * 필요서류<br/>*/}
                            { /*                                    변호사 : 대한변호사협회에서 발급된 변호사등록 증명원<br/>*/}
                            { /*                                    법무사 : 법무사자격증 또는 범무사자격 등록증*/}
                            { /*                                </p>*/}
                            { /*                            </div>*/}
                            { /*                            <div className="in_box">*/}
                            { /*                                <LUXFileDropZone*/}
                            { /*                                    onChange={this.handleChange}*/}
                            { /*                                    onTouchTapCloud={this.handleImportWeDriveDialog}*/}
                            { /*                                    selectedFiles={this.state.selectedFiles}*/}
                            { /*                                    // accept="image/png"*/}
                            { /*                                    isMultipleFileAllowed={true}*/}
                            { /*                                    showDeleteLoadButton={true}*/}
                            { /*                                    isWorking={this.state.isWorking}*/}
                            { /*                                    progressValue={this.state.progressValue}*/}
                            { /*                                />*/}
                            { /*                            </div>*/}
                            { /*                        </div>}*/}

                            { /*                    </div>*/}
                            { /*                </div>*/}
                            { /*            </div>*/}
                            { /*        </div>*/}
                            { /*    </div>*/}
                            { /*</div>}*/}

                            { /*{job === 'lawyer' &&*/}
                            <div className="dialog_content wel type_certi dz_font">
                                <div className="dialog_data" style={
    {width: '780px'
    }
}>
                                    <div className="dialog_data_tit">
                                        <h1 className="title_point">계정인증하기</h1>
                                        <p className="title_desc">
                                            사업자등록증, 전문가 자격 확인서를 등록하고 효율적인 서비스를 사용해보세요.
                                        </p>
                                    </div>
                                    <div className="dialog_data_area">
                                        <div className="dialog_data_section">
                                            <div className="dv_bx">
                                                <div className="dv_left">
                                                    <div className="view_box type_02">
                                                        <div className="view_img">
                                                            <img
                                                                src="https://static.wehago.com/imgs/wel/img_sample_certificate02.png"
                                                                alt=""/>
                                                            <p className="box_title">앞면</p>
                                                        </div>
                                                        <div className="view_img">
                                                            <img
                                                                src="https://static.wehago.com/imgs/wel/img_sample_certificate02_02.png"
                                                                alt=""/>
                                                            <p className="box_title">뒷면</p>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="dv_right">
                                                    <div className="in_box">
                                                        <div className="notice_box" style={
    {height: '320px'
    }
}>
                                                            <strong>안내</strong>
                                                            <ul className="notice_list">
                                                                <li>전문가 자격 확인이 이루어지지 않은 사용자에게는<br/>전문가회원찾기 서비스를 제공할 수
                                                                    없습니다.
                                                                </li>
                                                                <li className="sub">*관계법령: 변호사법 제 34조(변호사가 아닌 자와의 동업 금지
                                                                    등)
                                                                </li>
                                                            </ul>
                                                            <strong>필요 정보</strong>
                                                            <ul className="notice_list">
                                                                <li>변호사 자격증 발급번호</li>
                                                                <li className="sub error_color">*변호사 신분증이 없는 경우, 고객센터로
                                                                    문의주시기 바랍니다.
                                                                </li>
                                                            </ul>
                                                        </div>
                                                        <div className="inp_box">
                                                            <div className="inp_title">
                                                                <strong>변호사 자격 발급번호</strong>
                                                            </div>
                                                            <div className="inp_content">
                                                                <div className="LUX_basic_text">
                                                                    { /* 입력창에 포커스 - inpbx class="on" 추가  */}
                                                                    <div className="inpbx">
                                                                        <p className="placeholder"></p>
                                                                        <input type="text" id="textField_text" placeholder="발급번호를 입력해주세요."/>
                                                                        <span className="sp_lux"/>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            { /*}*/}

                            { /* [D] display:none/block으로 제어 부탁 드립니다. */}

                            <div className="dialog_btnbx">
                                <div>
                                    <button type="button" className="LUX_basic_btn SAOverConfirm basic"
                                            style={
    {margin: '0 2px'
    }
}><span>취소</span></button>

                                    {job === 'lawyer' &&
                                    <button type="button" className="LUX_basic_btn SAOverConfirm basic2"
                                            onClick={this.handleUploadNo.bind(this)
    }
                                            style={
        {margin: '0 2px'
        }
    }><span>완료</span></button>
}
                                    {job === 'legalOfficer' &&
                                    <button type="button" className="LUX_basic_btn SAOverConfirm basic2"
                                            onClick={this.handleUploadFile.bind(this)
    }
                                            style={
        {margin: '0 2px'
        }
    }><span>완료</span></button>
}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
}
}

export default AuthenticationUploadMain;
? /////////

package com.duzon.lulu.expertsearching.service.impl;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

import javax.management.Query;
import javax.servlet.http.HttpServletResponse;

import com.duzon.common.util.JsonUtil;
import com.duzon.lulu.expertsearching.mapper.AuthenticationMapper;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.lucene.search.join.ScoreMode;
import org.aspectj.weaver.ast.Instanceof;
import org.elasticsearch.index.query.BoolQueryBuilder;
import org.elasticsearch.index.query.NestedQueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.search.sort.SortBuilder;
import org.elasticsearch.index.query.MatchQueryBuilder;

import org.elasticsearch.search.sort.SortBuilders;
import org.elasticsearch.search.sort.SortOrder;
import org.json.JSONArray;
import org.json.JSONException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.duzon.common.model.LuluResult;
import com.duzon.common.model.LuluSession;
import com.duzon.common.util.StringUtil;
import com.duzon.lulu.auto.mapper.TCodeMapper;
import com.duzon.lulu.auto.mapper.TExpertAuthenticationMapper;
import com.duzon.lulu.auto.mapper.TExpertUserMapper;
import com.duzon.lulu.auto.mapper.TTermsAgreementMapper;
import com.duzon.lulu.auto.model.TCode;
import com.duzon.lulu.auto.model.TCodeExample;
import com.duzon.lulu.auto.model.TExpertAuthentication;
import com.duzon.lulu.auto.model.TExpertAuthenticationExample;
import com.duzon.lulu.auto.model.TExpertUser;
import com.duzon.lulu.auto.model.TExpertUserExample;
import com.duzon.lulu.auto.model.TTermsAgreement;
import com.duzon.lulu.auto.model.TTermsAgreementExample;
import com.duzon.lulu.expertsearching.mapper.ExpertInfoMapper;
import com.duzon.lulu.expertsearching.service.ElasticsearchService;
import com.duzon.lulu.expertsearching.service.ExpertInfoService;
import com.duzon.lulu.expertsearching.service.ExpertSearchingElasticsearchService;
import com.duzon.lulu.expertsearching.util.ConvertUtils;
import com.duzon.lulu.expertsearching.util.StringUtils;
import com.duzon.lulu.expertsearching.util.ValidationUtils;
import springfox.documentation.spring.web.json.Json;

/**
 * 전문가 회원 정보
 *
 * @author 김태현
 * @version 1.0
 * @history <pre>
 * << 개정이력(Modification Information) >>
 *
 *  수정일			수정자			수정내용
 *  ----------		---------		------------------------------
 *  2021.01.07		김태현			최초 생성
 *
 * </pre>
 * @see
 * @since 2021.01.07
 */
@Service
public class ExpertInfoServiceImpl extends BaseServiceImpl implements ExpertInfoService {
    private static final String INDEX_NAME = "t_expert_elastic_info";
    private static final String ID_PREFIX = "expert";

    private Logger logger = LogManager.getLogger(this.getClass());

    @Autowired
    private Properties luluProperties;

    @Autowired
    private ElasticsearchService elasticsearchService;

    @Autowired
    private ExpertSearchingElasticsearchService expertSearchingElasticsearchService;

    @Autowired
    private TExpertUserMapper tExpertUserMapper;

    @Autowired
    private TExpertAuthenticationMapper tExpertAuthenticationMapper;

    @Autowired
    private TTermsAgreementMapper tTermsAgreementMapper;

    @Autowired
    private TCodeMapper tCodeMapper;

    @Autowired
    ExpertInfoMapper expertInfoMapper;

    @Autowired
    AuthenticationMapper authenticationMapper;

    // 샘플본 로직
    @Override
    public LuluResult selectSampleTest(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();

        param.put("testKey",
"테스트 Value");
        String resultMsg = "결과 메세지 입니다.";
        System.out.println("######");
        System.out.println(param);
        result.setResultCode(200);
        result.setResultMsg(resultMsg);
        result.setResultData(param);

        return result;
}
/**
     * 코드 case별 리스트 호출
     */
    @Override
    public LuluResult selectCode(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();

        JSONArray caseListJSONArray = new JSONArray();
        JSONArray categoryListJSONArray = new JSONArray();
        List<HashMap> codeList = new ArrayList<HashMap>();

        try {
            caseListJSONArray = new JSONArray(StringUtil.fixNull(param.get("case_type_list")));
            categoryListJSONArray = new JSONArray(StringUtil.fixNull(param.get("code_category_list")));

            List convertCase = ConvertUtils.convertJSONArrayToArrayList(caseListJSONArray);
            List convertCategory = ConvertUtils.convertJSONArrayToArrayList(categoryListJSONArray);

            System.out.println("--------------------");
            System.out.println(convertCase);
            System.out.println(convertCategory);
            System.out.println("--------------------");

            TCodeExample tCodeExample = new TCodeExample();
            TCodeExample.Criteria tCodeCriteria = tCodeExample.createCriteria();

            List<String> caseTypeList = new ArrayList<String>();
            for (int i = 0; i < convertCase.size(); i++) {
                caseTypeList.add(String.valueOf(convertCase.get(i)));
    }
            List<String> categoryList = new ArrayList<String>();
            for (int i = 0; i < convertCategory.size(); i++) {
                categoryList.add(String.valueOf(convertCategory.get(i)));
    }

            tCodeCriteria.andCase_typeIn(caseTypeList);
            tCodeCriteria.andCode_categoryIn(categoryList);
            List<TCode> codeInfo = tCodeMapper.selectByExample(tCodeExample);

            for (TCode codeData : codeInfo) {
                HashMap<String, Object> hash = new HashMap<String, Object>();
                hash.put("key", codeData.getCode());
                hash.put("value", codeData.getCode_name());
                hash.put("parent", codeData.getParent_code());

                codeList.add(hash);
    }
} catch (JSONException e) {
    // TODO Auto-generated catch block
            e.printStackTrace();
}
        result.setResultCode(200);
        result.setResultData(codeList);

        return result;
}
/**
     * 로그인 유저 정보 조회
     */
    @Override
    public LuluResult selectLoign(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();

        // 전문가 기본 정보 조회
        TExpertUserExample tExpertUserExample = new TExpertUserExample();
        TExpertUserExample.Criteria tCodeCriteria = tExpertUserExample.createCriteria();
        tCodeCriteria.andCompany_noEqualTo(session.getCompany_no());
        tCodeCriteria.andEmployee_noEqualTo(session.getEmployee_no());
        tCodeCriteria.andIs_deletedEqualTo("F");
        List<TExpertUser> expertUserInfo = tExpertUserMapper.selectByExample(tExpertUserExample);

        String expert_user_name = null;
        String expert_job = null;
        Long expert_user_no = 0L;

        for (TExpertUser userInfo : expertUserInfo) {
            expert_user_name = userInfo.getExpert_user_name();
            expert_job = userInfo.getExpert_job();
            expert_user_no = userInfo.getExpert_user_no();
}

        HashMap<String, Object> expertUserHashMap = new HashMap<String, Object>();
        expertUserHashMap.put("expert_user_name", expert_user_name);
        expertUserHashMap.put("expert_job", expert_job);
        expertUserHashMap.put("expert_user_no", expert_user_no);

        result.setResultCode(200);
        result.setResultData(expertUserHashMap);
        return result;
}
/**
     * 전문가 회원 정보 조회 (단건)
     */
    @Override
    public LuluResult selectExpert(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();

        HashMap<String, Object> expertUserHashMap = new HashMap<String, Object>();

        // 전문가 기본 정보 조회
        TExpertUserExample tExpertUserExample = new TExpertUserExample();
        TExpertUserExample.Criteria tCodeCriteria = tExpertUserExample.createCriteria();
        tCodeCriteria.andCompany_noEqualTo(session.getCompany_no());
        tCodeCriteria.andEmployee_noEqualTo(session.getEmployee_no());
        tCodeCriteria.andExpert_user_noEqualTo(Long.valueOf((String) param.get("expert_user_no")));
        tCodeCriteria.andIs_deletedEqualTo("F");
        List<TExpertUser> expertUserInfo = tExpertUserMapper.selectByExample(tExpertUserExample);

        String expert_user_name = null;
        String expert_job = null;

        for (TExpertUser userInfo : expertUserInfo) {
            expert_user_name = userInfo.getExpert_user_name();
            expert_job = userInfo.getExpert_job();
}
// 자격 인증 정보조회
        TExpertAuthenticationExample tExpertAuthenticationExample = new TExpertAuthenticationExample();
        TExpertAuthenticationExample.Criteria tAuthentication = tExpertAuthenticationExample.createCriteria();
        tCodeCriteria.andEmployee_noEqualTo(session.getEmployee_no());
        tAuthentication.andExpert_user_noEqualTo(Long.valueOf((String) param.get("expert_user_no")));
        tAuthentication.andIs_deletedEqualTo("F");
        List<TExpertAuthentication> expertAuthenticInfo = tExpertAuthenticationMapper
                .selectByExample(tExpertAuthenticationExample);

        String thumbnail_url = null;
        String path = null;
        String bucket_type = null;
        String org_file_name = null;
        Long size = null;
        String is_authentication = null;

        for (TExpertAuthentication authenticInfo : expertAuthenticInfo) {
            thumbnail_url = authenticInfo.getThumbnail_url();
            path = authenticInfo.getPath();
            bucket_type = authenticInfo.getBucket_type();
            org_file_name = authenticInfo.getOrg_file_name();
            size = authenticInfo.getSize();
            is_authentication = authenticInfo.getIs_authentication();
}

        HashMap<String, Object> basicInfo = new HashMap<String, Object>();
        basicInfo.put("expert_user_name", expert_user_name);
        basicInfo.put("expert_job", expert_job);
        basicInfo.put("thumbnail_url", thumbnail_url);
        basicInfo.put("path", path);
        basicInfo.put("bucket_type", bucket_type);
        basicInfo.put("org_file_name", org_file_name);
        basicInfo.put("size", size);
        basicInfo.put("is_authentication", is_authentication);

        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        boolQueryBuilder.must().add(QueryBuilders.matchQuery("expert_user_no", param.get("expert_user_no")));
        List<SortBuilder> sortBuilderList = new ArrayList<>();
        Integer from = 0;

        List<Map> expertUserElasticsearchResult = elasticsearchService.searchIndex(INDEX_NAME, boolQueryBuilder,
                sortBuilderList, from,
1000, ID_PREFIX);
        expertUserHashMap.put("expertBasicInfo", basicInfo);
        expertUserHashMap.put("expertDetailInfo", expertUserElasticsearchResult);

        result.setResultData(expertUserHashMap);
        return result;
}
/**
     * 전문가 회원 정보 조회 리스트 (전문가 찾기 기능)
     */

    @Override
    public LuluResult selectExpertList(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();

        TExpertUserExample tExpertUserExample = new TExpertUserExample();
        TExpertUserExample.Criteria tCodeCriteria = tExpertUserExample.createCriteria();
        tCodeCriteria.andCompany_noEqualTo(session.getCompany_no());
        tCodeCriteria.andEmployee_noEqualTo(session.getEmployee_no());
        tCodeCriteria.andIs_deletedEqualTo("F");
        List<TExpertUser> expertUserInfo = tExpertUserMapper.selectByExample(tExpertUserExample);
        System.out.println(expertUserInfo);
        Long expertUserNo = null;
        if (null == expertUserInfo || 1 > expertUserInfo.size()) {
            result.setResultData(new ArrayList<>());
} else {
            for (TExpertUser userInfo : expertUserInfo) {
                expertUserNo = userInfo.getExpert_user_no();
    }
}
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();

        // try nested
        Map<String, String> propertyValues = new HashMap<String, String>();
        propertyValues.put("license.test_type",
"정보처리기사"); // 안돼 뭐가 문제인가
        // answer: query문 콘솔에 찍힌걸 보니, "query" 다음에 "nested"와 "path"가 빠져있다. 이게 있어야 nested에서 동작해
//        propertyValues.put("consultations.Diagnosis", "Fever");
        Iterator<String> iterator = propertyValues.keySet().iterator();

        while (iterator.hasNext()) {
            String propertyName = iterator.next();
            String propertyValue = propertyValues.get(propertyName);
            MatchQueryBuilder matchQuery = QueryBuilders.matchQuery(propertyName, propertyValue);
            boolQueryBuilder.must(matchQuery);
}
//        ScoreMode Avg = new ScoreMode(); // initalize가 안되기 대문에 에러발생
        ScoreMode scoreType = ScoreMode.Avg;

        QueryBuilder queryBuilder = QueryBuilders.nestedQuery("license", boolQueryBuilder, scoreType);
        System.out.println("queryBuilder = " + queryBuilder);
        List<SortBuilder> sortBuilderList = new ArrayList<>();
        Integer from = 1;
        Integer size = 1000;
        HashMap<String, Object> expertUserHashMap = new HashMap<String, Object>();

        // 이거 없어도 전체 doc 가져올 수 있다.
//        boolQueryBuilder.must().add(QueryBuilders.matchQuery("_type", "_doc"));
// test query
//        boolQueryBuilder.must().add(QueryBuilders.matchQuery("expert_user_name", "임성후"));
//        boolQueryBuilder.must().add(QueryBuilders.matchQuery("expert_job", "변호사사"));
        expertUserHashMap.put("expert_user_no", expertUserNo);
        // _doc을 인자로 보내서 싹다 가져오자 (type: _doc <= table: type)
// 여기서 boolQueryBuilder를 인자로 넘기기 전에 nestedQueryBuilder에 감싼 후에 넘겨야한다.
        List<Map> expertUserElasticsearchResult = elasticsearchService.searchIndex(INDEX_NAME, queryBuilder, sortBuilderList, from, size, ID_PREFIX);
        expertUserHashMap.put("expertUserElasticsearchResult", expertUserElasticsearchResult);
        result.setResultData(expertUserHashMap);
        return result;
}
// 전문가 인증 정보 저장
    @Override
    public LuluResult insertExpertQualification(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();
        HashMap<String, Object> resultData = new HashMap<>();
        JSONArray listJSONArray = new JSONArray();
        try {
            listJSONArray = new JSONArray(StringUtil.fixNull(param.get("qualificationInfo")));
            List convert1Depth = ConvertUtils.convertJSONArrayToArrayList(listJSONArray);
            Map<String, Object> hashData = new HashMap<>();
            hashData = (HashMap<String, Object>) convert1Depth.get(0);

            String expert_user_name = StringUtil.fixNull(session.getUser_name());
            String position_name = StringUtil.fixNull(session.getPosition_name());

            logger.debug("----------------------------------------------------");
            logger.debug(session.getPosition_name());
            logger.debug("----------------------------------------------------");

            // 전문가 회원 기본 정보 삽입
            HashMap<String, Object> hashParam = new HashMap<String, Object>();
            hashParam.put("is_self_authentication",
    "F");
            hashParam.put("company_no", session.getCompany_no());
            hashParam.put("employee_no", session.getEmployee_no());
            hashParam.put("expert_user_name", expert_user_name);
            hashParam.put("expert_job", position_name);
            hashParam.put("is_deleted",
    "F");
            String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
            insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
            hashParam.put("insert_portal_id", insert_portal_id);

            List<HashMap> expertReturningData = expertInfoMapper.insertExpert(hashParam);

            HashMap<String, Object> authenticParam = (HashMap<String, Object>) expertReturningData.get(0);

            authenticParam.put("employee_no", session.getEmployee_no());
            authenticParam.put("thumbnail_url", hashData.get("thumbnail_url"));
            authenticParam.put("path", hashData.get("path"));
            authenticParam.put("bucket_type", hashData.get("bucket_type"));
            authenticParam.put("org_file_name", hashData.get("org_file_name"));
            authenticParam.put("size", Integer.parseInt(String.valueOf(hashData.get("size"))));
            authenticParam.put("insert_portal_id", insert_portal_id);


            // hashData를 인덱스별로 저장하면, 그게 Json 형태 => 근데 rdb에 저장해야한다.
    // 한개의 인덱스별로, 키-value로 저장한다. => 하나의 배열 인덱스 값이, 하나의 로우 차지
    // i만큼 돌리기에, 한번의 iter마다 db insert를 해주어야 한다.
    //DB 삽입
            authenticationMapper.insertAuthentication(authenticParam);
} catch (JSONException e) {
    // TODO Auto-generated catch block
            e.printStackTrace();
}
        result.setResultCode(200);
        return null;
}
// TODO 회원정보 저장 로직에 추가 약관 동의 정보 저장
    @Override
    public void settingTerms(HashMap<String, Object> termsInfoParam) {
        HashMap<String, Object> result = new HashMap<String, Object>();

        Long expertUserNo = Long.valueOf((String) termsInfoParam.get("expert_user_no"));

        TTermsAgreement tTermsAgreement = new TTermsAgreement();
        tTermsAgreement.setExpert_user_no(expertUserNo);
        tTermsAgreement.setTerms_version(StringUtil.fixNull(termsInfoParam.get("terms_version")));
        tTermsAgreement.setType_terms(Short.valueOf((String) termsInfoParam.get("type_terms")));
        tTermsAgreement.setYn_terms(StringUtil.fixNull(termsInfoParam.get("yn_terms")));
        tTermsAgreement.setInsert_portal_id(StringUtil.fixNull(termsInfoParam.get("insert_portal_id")));
        tTermsAgreementMapper.insertSelective(tTermsAgreement);
}


    private Map selectSalesElasticsearch(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        HashMap<String, Object> resutlData = new HashMap<String, Object>();
        LuluResult result = new LuluResult();
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
//		boolQueryBuilder.must().add(QueryBuilders.matchQuery("company_no", 4));
//		boolQueryBuilder.must().add(QueryBuilders.matchQuery("is_deleted", 'F'));
        String idPrefix = "expert";
        List<Map> selectedExpertMapList = new ArrayList<>();
        List<SortBuilder> sortBuilderList = new ArrayList<>();
//		selectedExpertMapList = elasticsearchService.searchIndex(INDEX_NAME, boolQueryBuilder, sortBuilderList, 0, 10000, idPrefix);
//		long count = elasticsearchService.countIndex(INDEX_NAME, boolQueryBuilder);
//		resutlData.put("count",count);
//		Map<String, Object> selectExpertMap = elasticsearchService.getIndex(INDEX_NAME, "1", idPrefix);
/* 문서 설정 */
        Map<String, Object> doc = new HashMap<>();
        doc.put("career_year",
"15년");
        doc.put("entire_career",
"변호사");
        doc.put("expert_user_no",
300);
        doc.put("is_deleted",
"F");

//		String is_deleted = StringUtil.fixNull(param.get("is_deleted"));
//		is_deleted = StringUtils.trimWhitespace(is_deleted);
//		is_deleted = is_deleted.toUpperCase();
//		String insert_portal_id = StringUtil.fixNull(param.get("insert_portal_id"));
//		insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
//		String insert_timestamp = StringUtil.fixNull(param.get("insert_timestamp"));
//		insert_timestamp = StringUtils.trimWhitespace(insert_timestamp);
//		String updated_portal_id = StringUtil.fixNull(param.get("updated_portal_id"));
//		updated_portal_id = StringUtils.trimWhitespace(updated_portal_id);
//		String updated_timestamp = StringUtil.fixNull(param.get("updated_timestamp"));
//
//		if (ValidationUtils.isNotNullAndNotEmpty("portal_id")) {
//			doc.put("insert_portal_id", "test");
//		} else {
////			doc.put("insert_portal_id", portal_id);
//		}
//		if (ValidationUtils.isNotNullAndNotEmpty(insert_timestamp)) {
//			doc.put("insert_timestamp", insert_timestamp);
//		} else {
//			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
//			LocalDateTime localDateTime = LocalDateTime.now();
//			insert_timestamp = localDateTime.format(dateTimeFormatter);
//			doc.put("insert_timestamp", insert_timestamp);
//		}
//		if (ValidationUtils.isNotNullAndNotEmpty(updated_portal_id)) {
//			doc.put("updated_portal_id", updated_portal_id);
//		} else {
//			doc.put("updated_portal_id", "test");
//		}
//		if (ValidationUtils.isNotNullAndNotEmpty(updated_timestamp)) {
//			doc.put("updated_timestamp", updated_timestamp);
//		} else {
//			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
//			LocalDateTime localDateTime = LocalDateTime.now();
//			updated_timestamp = localDateTime.format(dateTimeFormatter);
//			doc.put("updated_timestamp", updated_timestamp);
//		}
//		Map insertedSalesMap = elasticsearchService.insertIndex(INDEX_NAME, StringUtil.fixNull(1), doc, ID_PREFIX);

        return resutlData;
}
// 도큐먼트 카운팅 조회
    private Map selectExpertCountElasticsearch(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        HashMap<String, Object> resutlData = new HashMap<String, Object>();
        LuluResult result = new LuluResult();
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        long count = elasticsearchService.countIndex(INDEX_NAME, boolQueryBuilder);
//		resutlData.put("count",count);

        return resutlData;
}
// 전문가 디테일 정보 삽입
    private Map insertExpertDetailElasticsearch(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        HashMap<String, Object> resutlData = new HashMap<String, Object>();
        LuluResult result = new LuluResult();
        BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();
        String idPrefix = "expert";

        /* 문서 설정 */
        Map<String, Object> doc = new HashMap<>();
        doc.put("career_year",
"30년");
        doc.put("entire_career",
"법무");
        doc.put("expert_user_no",
200);
        doc.put("is_deleted",
"F");

        String is_deleted = StringUtil.fixNull(param.get("is_deleted"));
        is_deleted = StringUtils.trimWhitespace(is_deleted);
        is_deleted = is_deleted.toUpperCase();
        String insert_portal_id = StringUtil.fixNull(param.get("insert_portal_id"));
        insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
        String insert_timestamp = StringUtil.fixNull(param.get("insert_timestamp"));
        insert_timestamp = StringUtils.trimWhitespace(insert_timestamp);
        String updated_portal_id = StringUtil.fixNull(param.get("updated_portal_id"));
        updated_portal_id = StringUtils.trimWhitespace(updated_portal_id);
        String updated_timestamp = StringUtil.fixNull(param.get("updated_timestamp"));

        if (ValidationUtils.isNotNullAndNotEmpty("portal_id")) {
            doc.put("insert_portal_id",
    "test");
} else {
    //			doc.put("insert_portal_id", portal_id);
}
        if (ValidationUtils.isNotNullAndNotEmpty(insert_timestamp)) {
            doc.put("insert_timestamp", insert_timestamp);
} else {
            DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
            LocalDateTime localDateTime = LocalDateTime.now();
            insert_timestamp = localDateTime.format(dateTimeFormatter);
            doc.put("insert_timestamp", insert_timestamp);
}
        if (ValidationUtils.isNotNullAndNotEmpty(updated_portal_id)) {
            doc.put("updated_portal_id", updated_portal_id);
} else {
            doc.put("updated_portal_id",
    "test");
}
//		if (ValidationUtils.isNotNullAndNotEmpty(updated_timestamp)) {
//			doc.put("updated_timestamp", updated_timestamp);
//		} else {
//			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
//			LocalDateTime localDateTime = LocalDateTime.now();
//			updated_timestamp = localDateTime.format(dateTimeFormatter);
//			doc.put("updated_timestamp", updated_timestamp);
//		}

        elasticsearchService.insertIndex(INDEX_NAME, doc, ID_PREFIX);

        return resutlData;
}

    @Override
    public Map<String, Object> getIndex(String index, String id, String idPrefix) {
// TODO Auto-generated method stub
        return null;
}

    @Override
    public Map<String, Object> insertIndex(String index, String id, Map<String, Object> doc, String idPrefix) {
// TODO Auto-generated method stub
        return null;
}

    @Override
    public Map<String, Object> updateIndex(String index, String id, Map<String, Object> doc, String idPrefix) {
// TODO Auto-generated method stub
        return null;
}
//	전문가 회원 정보 삽입
    @Override
    public LuluResult insertExpert(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();
        HashMap<String, Object> resultData = new HashMap<>();
        JSONArray listJSONArray = new JSONArray();
        try {
            listJSONArray = new JSONArray(StringUtil.fixNull(param.get("detailInfoList")));
            List convert1Depth = ConvertUtils.convertJSONArrayToArrayList(listJSONArray);
            Map<String, Object> hashData = new HashMap<>();
            hashData = (HashMap<String, Object>) convert1Depth.get(0);

            String expert_user_name = StringUtil.fixNull(param.get("expert_user_name"));
            String position_name = StringUtil.fixNull(param.get("position_name"));

//            StringUtil.fixNull(session.getPosition_name())
            logger.debug("----------------------------------------------------");
            logger.debug(session.getPosition_name());
            logger.debug("----------------------------------------------------");

            // 전문가 회원 기본 정보 삽입
            HashMap<String, Object> hashParam = new HashMap<String, Object>();
            hashParam.put("is_self_authentication", param.get("is_self_authentication"));
            hashParam.put("company_no", session.getCompany_no());
            hashParam.put("employee_no", session.getEmployee_no());
            hashParam.put("expert_user_name", expert_user_name);
            hashParam.put("expert_job", position_name);
            hashParam.put("is_deleted",
    "F");
            String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
            insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
            hashParam.put("insert_portal_id", insert_portal_id);

            List<HashMap> expertReturningData = expertInfoMapper.insertExpert(hashParam);


            // elastic 처리용
            HashMap<String, Object> expertUserData = new HashMap<>();
            expertUserData = (HashMap<String, Object>) expertReturningData.get(0);
            hashData.put("expert_user_no", expertUserData.get("expert_user_no"));
            // expert_user_name 추가
            hashData.put("expert_user_name", expertUserData.get("expert_user_name"));
            hashData.put("expert_job", expertUserData.get("expert_job"));


            // 전문가 회원 디테일 정보 삽입
            result.setResultData(elasticsearchService.insertIndex(INDEX_NAME, hashData, ID_PREFIX));

//			elasticsearchService.insertIndex(INDEX_NAME, hashData, ID_PREFIX);
} catch (JSONException e) {
    // TODO Auto-generated catch block
            e.printStackTrace();
}
// 전문가 정보 추가 - auto 모델 사용시(bybatis 사용)
//		TExpertUser tExpertUser = new TExpertUser();
//		tExpertUser.setCompany_no(session.getCompany_no());
//		tExpertUser.setEmployee_no(session.getEmployee_no());
//		tExpertUser.setExpert_user_name(param.get("expert_user_name").toString());
//		tExpertUser.setExpert_job(param.get("expert_job").toString());
//		tExpertUser.setIs_deleted("F");
//
//		String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
//		insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
//		tExpertUser.setInsert_portal_id(insert_portal_id);
//		tExpertUserMapper.insertSelective(tExpertUser);
//		HashMap<String, Object> hashParam = new HashMap<String, Object>();
//		hashParam.put("is_self_authentication", "F");
//		hashParam.put("company_no", session.getCompany_no());
//		hashParam.put("employee_no", session.getEmployee_no());
//		hashParam.put("expert_user_name", param.get("expert_user_name"));
//		hashParam.put("expert_job", param.get("expert_job"));
//		hashParam.put("is_deleted", "F");
//
//		String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
//		insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
//		hashParam.put("insert_portal_id",insert_portal_id);
//
//		List<HashMap> list = expertInfoMapper.insertExpert(hashParam);
//		String expert_user_no = list.get(0).get("expert_user_no").toString();

        result.setResultCode(200);
        return result;
}
//LIM
    @Override
    public LuluResult selectCertificate(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();
        HashMap<String, Object> hashParam = new HashMap<String, Object>();

        JSONArray listJSONArray = new JSONArray();
        try {
            listJSONArray = new JSONArray(StringUtil.fixNull(param.get("uploadList")));
            System.out.println("1" + listJSONArray);
            List convert1Depth = ConvertUtils.convertJSONArrayToArrayList(listJSONArray);
            System.out.println("1" + listJSONArray);

            Map<String, Object> hashData = new HashMap<>();


            for (int i = 0; i < convert1Depth.size(); i++) {

                hashData = (HashMap<String, Object>) convert1Depth.get(i);

//                hashParam.put("expert_authentication_no", hashData.get("expert_authentication_no")); // 자동 생성
        //                hashParam.put("expert_user_no", hashData.get("expert_user_no")); // 자동 생성
        //                hashParam.put("certification_file_no", hashData.get("certification_file__no")); // 어디서 받아올지?
        //                System.out.println("break");
                hashParam.put("employee_no", session.getEmployee_no());
                hashParam.put("certification_job",
        "now working");
                logger.debug(hashData.get("thumbnail_url"));
                hashParam.put("thumbnail_url", hashData.get("thumbnail_url"));
                hashParam.put("path", hashData.get("path"));
                hashParam.put("bucket_type", hashData.get("bucket_type"));
                hashParam.put("org_file_name", hashData.get("org_file_name"));
                hashParam.put("size", Integer.parseInt(String.valueOf(hashData.get("size"))));


                // portal_id 삽입
                String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
                insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
                hashParam.put("insert_portal_id", insert_portal_id);
                System.out.println("500 nooooo");


                // hashData를 인덱스별로 저장하면, 그게 Json 형태 => 근데 rdb에 저장해야한다.
        // 한개의 인덱스별로, 키-value로 저장한다. => 하나의 배열 인덱스 값이, 하나의 로우 차지
        // i만큼 돌리기에, 한번의 iter마다 db insert를 해주어야 한다.
        //DB 삽입
                List<HashMap> expertReturningData = authenticationMapper.insertAuthentication(hashParam);
                System.out.println("expertReturningData");
                System.out.println(expertReturningData);

                HashMap<String, Object> AuthenticationData = new HashMap<>();
                AuthenticationData = (HashMap<String, Object>) expertReturningData.get(0);
    }
} catch (JSONException e) {
    // 여긴 안들어와
}
        result.setResultCode(200);
        result.setResultMsg("결과 메시지 입니다.!");
        result.setResultData(hashParam.get("org_file_name"));
        return result;
}

    @Override
    public LuluResult selectAuthenticateNo(HashMap<String, Object> param) {
// TODO Auto-generated method stub
        LuluResult result = new LuluResult();
        LuluSession session = super.getSession();
        HashMap<String, Object> hashParam = new HashMap<String, Object>();

        JSONArray listJSONArray = new JSONArray();

        List<HashMap> list = JsonUtil.toList(param.get("uploadList").toString());

        // point 는 여기서 lawyer_authentication_no를 뽑아내는 것
        for (HashMap li : list) {

            hashParam.put("expert_job", li.get("expert_job").toString());
            hashParam.put("lawyer_authentication_no", li.get("lawyer_authentication_no").toString());
            hashParam.put("expert_user_name", li.get("expert_user_name").toString());
}
// portal_id 삽입
        String insert_portal_id = StringUtil.fixNull(session.getPortal_id());
        insert_portal_id = StringUtils.trimWhitespace(insert_portal_id);
        hashParam.put("insert_portal_id", insert_portal_id);

        //DB 삽입
//        List<HashMap> expertReturningData = authenticationMapper.insertAuthentication(hashParam);
//        System.out.println("expertReturningData");
//        System.out.println(expertReturningData);
//        HashMap<String, Object> AuthenticationData = new HashMap<>();
//        AuthenticationData = (HashMap<String, Object>) expertReturningData.get(0);

        result.setResultCode(200);
        result.setResultMsg("결과 메시지 입니다.!");
        result.setResultData(hashParam);


        return result;
}
}
// prefix
{
"query": {
"prefix": {
    "org_file_name": "증"
}
}
}
//////////////
{
"nested": {
"query": {
    "match": {
        "license.test_type": {
            "query": "로스쿨",
            "operator": "OR",
            "prefix_length": 0,
            "max_expansions": 50,
            "fuzzy_transpositions": true,
            "lenient": false,
            "zero_terms_query": "NONE",
            "auto_generate_synonyms_phrase_query": true,
            "boost": 1.0
        }
    }
},
"path": "license",
"ignore_unmapped": false,
"score_mode": "avg",
"boost": 1.0
}
}
//////
{
"nested": {
"query": {
    "match": {
        "work_field.expert_field.key": {
            "query": "B010",
            "operator": "OR",
            "prefix_length": 0,
            "max_expansions": 50,
            "fuzzy_transpositions": true,
            "lenient": false,
            "zero_terms_query": "NONE",
            "auto_generate_synonyms_phrase_query": true,
            "boost": 1.0
        }
    }
},
"path": "work_field",
"ignore_unmapped": false,
"score_mode": "avg",
"boost": 1.0
}
}



{
"query": {
"nested": {
    "query": {
        "match": [
            {
                "license.test_type": {
                    "query": "사법시험",
                    "operator": "OR",
                    "prefix_length": 0,
                    "max_expansions": 50,
                    "fuzzy_transpositions": true,
                    "lenient": false,
                    "zero_terms_query": "NONE",
                    "auto_generate_synonyms_phrase_query": true,
                    "boost": 1
                }
            },
            {
                "license.test_type": {
                    "query": "로스쿨"
                }
            }
        ]
    },
    "path": "license",
    "ignore_unmapped": false,
    "score_mode": "avg",
    "boost": 1
}
}
}




{
"query": "nested": {
"query": {
    "bool": {
        "should": [
            {
                "match": {
                    "work_field.choice_field.key": {
                        "query": "B002",
                        "operator": "OR",
                        "prefix_length": 0,
                        "max_expansions": 50,
                        "fuzzy_transpositions": true,
                        "lenient": false,
                        "zero_terms_query": "NONE",
                        "auto_generate_synonyms_phrase_query": true,
                        "boost": 1.0
                    }
                }
            },
            {
                "match": {
                    "work_field.expert_field.key": {
                        "query": "B010",
                        "operator": "OR",
                        "prefix_length": 0,
                        "max_expansions": 50,
                        "fuzzy_transpositions": true,
                        "lenient": false,
                        "zero_terms_query": "NONE",
                        "auto_generate_synonyms_phrase_query": true,
                        "boost": 1.0
                    }
                }
            }
        ],
        "adjust_pure_negative": true,
        "boost": 1.0
    }
},
"path": "work_field",
"ignore_unmapped": false,
"score_mode": "none",
"boost": 1.0
}
}
}
}